#!/usr/bin/env python3
"""
Script autom√°tico para configura√ß√£o Git e deploy no Railway
UT-SOCIOS - Sistema de Gest√£o de S√≥cios
"""

import os
import sys
import subprocess
import json
import time
from pathlib import Path

class GitDeployManager:
    def __init__(self):
        self.project_root = Path.cwd()
        self.git_initialized = False
        self.remote_added = False
        
    def print_step(self, step, description):
        """Imprimir passo atual"""
        print(f"\n{'='*60}")
        print(f"üîß PASSO {step}: {description}")
        print(f"{'='*60}")
        
    def run_command(self, command, description=""):
        """Executar comando e capturar resultado"""
        print(f"‚ö° Executando: {command}")
        if description:
            print(f"üìù {description}")
        
        try:
            result = subprocess.run(
                command, 
                shell=True, 
                capture_output=True, 
                text=True, 
                cwd=self.project_root
            )
            
            if result.returncode == 0:
                print(f"‚úÖ Sucesso!")
                if result.stdout.strip():
                    print(f"üì§ Sa√≠da: {result.stdout.strip()}")
                return True, result.stdout, result.stderr
            else:
                print(f"‚ùå Erro!")
                if result.stderr.strip():
                    print(f"üö® Erro: {result.stderr.strip()}")
                return False, result.stdout, result.stderr
                
        except Exception as e:
            print(f"üí• Exce√ß√£o: {e}")
            return False, "", str(e)
    
    def check_git_installed(self):
        """Verificar se Git est√° instalado"""
        print("\nüîç Verificando se Git est√° instalado...")
        success, stdout, stderr = self.run_command("git --version")
        
        if not success:
            print("‚ùå Git n√£o est√° instalado!")
            print("üì• Baixe e instale o Git em: https://git-scm.com/downloads")
            return False
        
        print(f"‚úÖ Git encontrado: {stdout.strip()}")
        return True
    
    def initialize_git(self):
        """Inicializar reposit√≥rio Git"""
        self.print_step(1, "INICIALIZANDO REPOSIT√ìRIO GIT")
        
        # Verificar se j√° √© um reposit√≥rio Git
        if os.path.exists(".git"):
            print("‚úÖ Reposit√≥rio Git j√° inicializado")
            self.git_initialized = True
            return True
        
        # Inicializar Git
        success, stdout, stderr = self.run_command("git init", "Inicializando reposit√≥rio Git")
        
        if success:
            self.git_initialized = True
            print("‚úÖ Reposit√≥rio Git inicializado com sucesso!")
            return True
        else:
            print("‚ùå Falha ao inicializar Git")
            return False
    
    def create_gitignore(self):
        """Criar arquivo .gitignore"""
        self.print_step(2, "CRIANDO ARQUIVO .gitignore")
        
        gitignore_content = """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Environment variables
.env
.env.local
.env.production

# Streamlit
.streamlit/secrets.toml

# Database
*.db
*.sqlite3

# Logs
*.log

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Uploads (opcional)
uploads/

# Railway
.railway/
"""
        
        try:
            with open(".gitignore", "w", encoding="utf-8") as f:
                f.write(gitignore_content)
            print("‚úÖ Arquivo .gitignore criado com sucesso!")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar .gitignore: {e}")
            return False
    
    def create_railway_toml(self):
        """Criar arquivo railway.toml"""
        self.print_step(3, "CRIANDO ARQUIVO railway.toml")
        
        railway_content = """[build]
builder = "NIXPACKS"

[deploy]
startCommand = "streamlit run main.py --server.port $PORT --server.address 0.0.0.0 --server.headless true"
healthcheckPath = "/"
healthcheckTimeout = 100
restartPolicyType = "ON_FAILURE"
"""
        
        try:
            with open("railway.toml", "w", encoding="utf-8") as f:
                f.write(railway_content)
            print("‚úÖ Arquivo railway.toml criado com sucesso!")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar railway.toml: {e}")
            return False
    
    def update_requirements_txt(self):
        """Atualizar requirements.txt"""
        self.print_step(4, "ATUALIZANDO requirements.txt")
        
        try:
            # Ler arquivo atual
            with open("requirements.txt", "r", encoding="utf-8") as f:
                content = f.read()
            
            # Adicionar pymysql se n√£o estiver presente
            if "pymysql" not in content:
                content += "\npymysql==1.1.0\n"
                
                with open("requirements.txt", "w", encoding="utf-8") as f:
                    f.write(content)
                print("‚úÖ requirements.txt atualizado com pymysql!")
            else:
                print("‚úÖ pymysql j√° est√° presente no requirements.txt")
            
            return True
        except Exception as e:
            print(f"‚ùå Erro ao atualizar requirements.txt: {e}")
            return False
    
    def configure_git_user(self):
        """Configurar usu√°rio Git"""
        self.print_step(5, "CONFIGURANDO USU√ÅRIO GIT")
        
        # Solicitar informa√ß√µes do usu√°rio
        print("\nüìù Por favor, forne√ßa suas informa√ß√µes do Git:")
        name = input("üë§ Nome completo: ").strip()
        email = input("üìß Email: ").strip()
        
        if not name or not email:
            print("‚ùå Nome e email s√£o obrigat√≥rios!")
            return False
        
        # Configurar nome
        success1, _, _ = self.run_command(f'git config user.name "{name}"')
        
        # Configurar email
        success2, _, _ = self.run_command(f'git config user.email "{email}"')
        
        if success1 and success2:
            print("‚úÖ Usu√°rio Git configurado com sucesso!")
            return True
        else:
            print("‚ùå Falha ao configurar usu√°rio Git")
            return False
    
    def add_files_to_git(self):
        """Adicionar arquivos ao Git"""
        self.print_step(6, "ADICIONANDO ARQUIVOS AO GIT")
        
        # Adicionar todos os arquivos
        success, stdout, stderr = self.run_command(
            "git add .", 
            "Adicionando todos os arquivos ao staging area"
        )
        
        if success:
            print("‚úÖ Arquivos adicionados com sucesso!")
            
            # Verificar status
            self.run_command("git status", "Verificando status dos arquivos")
            return True
        else:
            print("‚ùå Falha ao adicionar arquivos")
            return False
    
    def make_initial_commit(self):
        """Fazer commit inicial"""
        self.print_step(7, "FAZENDO COMMIT INICIAL")
        
        success, stdout, stderr = self.run_command(
            'git commit -m "Initial commit - UT-SOCIOS Streamlit App"',
            "Criando commit inicial"
        )
        
        if success:
            print("‚úÖ Commit inicial criado com sucesso!")
            return True
        else:
            print("‚ùå Falha ao criar commit")
            return False
    
    def rename_branch_to_main(self):
        """Renomear branch para main"""
        self.print_step(8, "RENOMEANDO BRANCH PARA MAIN")
        
        success, stdout, stderr = self.run_command(
            "git branch -M main",
            "Renomeando branch atual para 'main'"
        )
        
        if success:
            print("‚úÖ Branch renomeada para 'main'!")
            return True
        else:
            print("‚ùå Falha ao renomear branch")
            return False
    
    def get_github_repo_url(self):
        """Obter URL do reposit√≥rio GitHub"""
        self.print_step(9, "CONFIGURANDO REPOSIT√ìRIO GITHUB")
        
        print("\nüìù Por favor, forne√ßa a URL do seu reposit√≥rio GitHub:")
        print("üí° Exemplo: https://github.com/seu-usuario/ut-socios-streamlit.git")
        
        repo_url = input("üîó URL do reposit√≥rio: ").strip()
        
        if not repo_url:
            print("‚ùå URL do reposit√≥rio √© obrigat√≥ria!")
            return None
        
        if not repo_url.startswith("https://github.com/"):
            print("‚ùå URL deve come√ßar com 'https://github.com/'")
            return None
        
        if not repo_url.endswith(".git"):
            repo_url += ".git"
        
        return repo_url
    
    def add_remote_origin(self, repo_url):
        """Adicionar remote origin"""
        self.print_step(10, "ADICIONANDO REMOTE ORIGIN")
        
        # Verificar se remote j√° existe
        success, stdout, stderr = self.run_command("git remote -v")
        if "origin" in stdout:
            print("‚úÖ Remote 'origin' j√° existe!")
            self.remote_added = True
            return True
        
        # Adicionar remote
        success, stdout, stderr = self.run_command(
            f'git remote add origin "{repo_url}"',
            f"Adicionando remote origin: {repo_url}"
        )
        
        if success:
            self.remote_added = True
            print("‚úÖ Remote origin adicionado com sucesso!")
            return True
        else:
            print("‚ùå Falha ao adicionar remote origin")
            return False
    
    def push_to_github(self):
        """Fazer push para GitHub"""
        self.print_step(11, "FAZENDO PUSH PARA GITHUB")
        
        print("‚ö†Ô∏è  IMPORTANTE: Certifique-se de que o reposit√≥rio GitHub j√° foi criado!")
        print("üìã Se ainda n√£o criou, acesse: https://github.com/new")
        input("üëÜ Pressione Enter quando o reposit√≥rio estiver criado...")
        
        success, stdout, stderr = self.run_command(
            "git push -u origin main",
            "Fazendo push inicial para GitHub"
        )
        
        if success:
            print("üéâ Push realizado com sucesso!")
            print("‚úÖ Seu c√≥digo est√° agora no GitHub!")
            return True
        else:
            print("‚ùå Falha no push para GitHub")
            print("\nüîß Poss√≠veis solu√ß√µes:")
            print("1. Verifique se o reposit√≥rio existe no GitHub")
            print("2. Verifique se voc√™ tem permiss√µes de escrita")
            print("3. Tente autenticar com GitHub CLI ou token")
            return False
    
    def show_next_steps(self):
        """Mostrar pr√≥ximos passos"""
        self.print_step(12, "PR√ìXIMOS PASSOS - DEPLOY NO RAILWAY")
        
        print("""
üöÄ AGORA VOC√ä PODE FAZER O DEPLOY NO RAILWAY:

1. üì± Acesse: https://railway.app
2. üîê Fa√ßa login com GitHub
3. ‚ûï Clique em "New Project"
4. üìÇ Selecione "Deploy from GitHub repo"
5. üéØ Escolha seu reposit√≥rio: ut-socios-streamlit
6. üöÄ Clique em "Deploy Now"

üìã DEPOIS DO DEPLOY:
1. üóÑÔ∏è Adicione banco MySQL no Railway
2. ‚öôÔ∏è Configure as vari√°veis de ambiente
3. üåê Configure o dom√≠nio personalizado
4. ‚úÖ Teste a aplica√ß√£o

üí° DICAS:
- O Railway ir√° detectar automaticamente que √© um app Streamlit
- Use as vari√°veis de ambiente para configurar o banco
- Os logs estar√£o dispon√≠veis na dashboard do Railway

üéä PARAB√âNS! Seu app UT-SOCIOS est√° pronto para deploy!
        """)
    
    def run_full_process(self):
        """Executar processo completo"""
        print("üöÄ INICIANDO CONFIGURA√á√ÉO AUTOM√ÅTICA DO GIT E DEPLOY")
        print("=" * 70)
        
        # Verificar Git
        if not self.check_git_installed():
            return False
        
        # Processo de configura√ß√£o
        steps = [
            ("Inicializando Git", self.initialize_git),
            ("Criando .gitignore", self.create_gitignore),
            ("Criando railway.toml", self.create_railway_toml),
            ("Atualizando requirements.txt", self.update_requirements_txt),
            ("Configurando usu√°rio Git", self.configure_git_user),
            ("Adicionando arquivos", self.add_files_to_git),
            ("Fazendo commit", self.make_initial_commit),
            ("Renomeando branch", self.rename_branch_to_main),
        ]
        
        for step_name, step_func in steps:
            if not step_func():
                print(f"\n‚ùå FALHA NO PASSO: {step_name}")
                print("üõë Processo interrompido!")
                return False
        
        # Configurar reposit√≥rio
        repo_url = self.get_github_repo_url()
        if not repo_url:
            return False
        
        if not self.add_remote_origin(repo_url):
            return False
        
        # Push para GitHub
        if not self.push_to_github():
            return False
        
        # Mostrar pr√≥ximos passos
        self.show_next_steps()
        
        print("\nüéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!")
        return True

def main():
    """Fun√ß√£o principal"""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üöÄ UT-SOCIOS DEPLOY                       ‚ïë
‚ïë              Configura√ß√£o Autom√°tica Git + Railway          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists("main.py"):
        print("‚ùå ERRO: main.py n√£o encontrado!")
        print("üìÅ Execute este script no diret√≥rio raiz do projeto UT-SOCIOS")
        return
    
    # Executar processo
    manager = GitDeployManager()
    success = manager.run_full_process()
    
    if success:
        print("\nüéä SUCESSO! Seu projeto est√° pronto para deploy no Railway!")
    else:
        print("\nüí• FALHA! Verifique os erros acima e tente novamente.")

if __name__ == "__main__":
    main()
